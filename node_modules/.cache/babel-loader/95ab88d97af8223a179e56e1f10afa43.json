{"ast":null,"code":"var _jsxFileName = \"D:\\\\WebDev\\\\Amor\\\\amor\\\\src\\\\components\\\\signUpComp\\\\fileInput\\\\uploadedImg.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useCallback } from \"react\";\nimport Cropper from \"react-easy-crop\";\nimport getCroppedImg from \"./cropImage\";\nimport Button from \"@material-ui/core/Button\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport ImgDialog from \"./ImgDialog\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst styles = {\n  conContainer: {\n    position: \"absolute\",\n    width: \"100vw\",\n    height: \"100vh\"\n  },\n  overlayContainer: {\n    position: \"absolute\",\n    width: \"100vw\",\n    height: \"100vh\"\n  },\n  cropContainer: {\n    position: \"relative\",\n    width: \"100%\",\n    height: 200,\n    background: \"#333\"\n  },\n  controls: {\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  cropButton: {\n    flexShrink: 0,\n    marginLeft: 16\n  },\n  buttonContainer: {\n    position: \"absolute\",\n    bottom: \"5%\",\n    left: \"50%\",\n    transform: \"translate(-50%,0%)\"\n  }\n};\n\nfunction Crop({\n  classes,\n  imgUrl,\n  uploaded,\n  setUploaded,\n  setSt,\n  setDone\n}) {\n  _s();\n\n  const [crop, setCrop] = useState({\n    x: 0,\n    y: 0\n  });\n  const [rotation, setRotation] = useState(0);\n  const [zoom, setZoom] = useState(1);\n  const [croppedAreaPixels, setCroppedAreaPixels] = useState(null);\n  const [croppedImage, setCroppedImage] = useState(null);\n  const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\n    setCroppedAreaPixels(croppedAreaPixels);\n  }, []);\n  const showCroppedImage = useCallback(async () => {\n    try {\n      const croppedImage = await getCroppedImg(imgUrl, croppedAreaPixels, rotation); // console.log(\"donee\", { croppedImage });\n\n      setCroppedImage(croppedImage);\n      console.log(croppedImage);\n    } catch (e) {\n      console.error(e);\n    }\n  }, [croppedAreaPixels, imgUrl, rotation]);\n  const onClose = useCallback(() => {\n    setCroppedImage(null);\n  }, []);\n\n  function Continue() {\n    setSt();\n    setUploaded(false);\n    setDone({\n      done: true,\n      url: croppedImage\n    });\n  }\n\n  return uploaded ? /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        zIndex: 5\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Cropper, {\n          image: imgUrl,\n          crop: crop,\n          rotation: rotation,\n          zoom: zoom,\n          aspect: 7 / 9,\n          onCropChange: setCrop,\n          onRotationChange: setRotation,\n          onCropComplete: onCropComplete,\n          onZoomChange: setZoom\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.buttonContainer,\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: showCroppedImage,\n          variant: \"contained\",\n          color: \"primary\",\n          children: \"Show Result\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => {\n            setSt();\n            setUploaded(false);\n          },\n          variant: \"contained\",\n          color: \"primary\",\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ImgDialog, {\n        img: croppedImage,\n        onClose: () => {\n          onClose();\n        },\n        Continue: Continue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this)\n  }, void 0, false) : null;\n}\n\n_s(Crop, \"Fr1RVbqZUmbiofVjBHburGzlXek=\");\n\n_c = Crop;\nconst StyledCrop = withStyles(styles)(Crop);\nexport default function UploadedImg(props) {\n  return /*#__PURE__*/_jsxDEV(StyledCrop, {\n    imgUrl: props.imgUrl,\n    uploaded: props.uploaded,\n    setUploaded: props.setUploaded,\n    setSt: props.setSt,\n    setDone: props.setDone\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n}\n_c2 = UploadedImg;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Crop\");\n$RefreshReg$(_c2, \"UploadedImg\");","map":{"version":3,"sources":["D:/WebDev/Amor/amor/src/components/signUpComp/fileInput/uploadedImg.js"],"names":["useState","useCallback","Cropper","getCroppedImg","Button","withStyles","ImgDialog","styles","conContainer","position","width","height","overlayContainer","cropContainer","background","controls","display","flexDirection","cropButton","flexShrink","marginLeft","buttonContainer","bottom","left","transform","Crop","classes","imgUrl","uploaded","setUploaded","setSt","setDone","crop","setCrop","x","y","rotation","setRotation","zoom","setZoom","croppedAreaPixels","setCroppedAreaPixels","croppedImage","setCroppedImage","onCropComplete","croppedArea","showCroppedImage","console","log","e","error","onClose","Continue","done","url","zIndex","StyledCrop","UploadedImg","props"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,OAAOC,aAAP,MAA0B,aAA1B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,SAAP,MAAsB,aAAtB;;;AAEA,MAAMC,MAAM,GAAG;AACXC,EAAAA,YAAY,EAAE;AACZC,IAAAA,QAAQ,EAAE,UADE;AAEZC,IAAAA,KAAK,EAAE,OAFK;AAGZC,IAAAA,MAAM,EAAE;AAHI,GADH;AAMXC,EAAAA,gBAAgB,EAAE;AAChBH,IAAAA,QAAQ,EAAE,UADM;AAEhBC,IAAAA,KAAK,EAAE,OAFS;AAGhBC,IAAAA,MAAM,EAAE;AAHQ,GANP;AAWXE,EAAAA,aAAa,EAAE;AACbJ,IAAAA,QAAQ,EAAE,UADG;AAEbC,IAAAA,KAAK,EAAE,MAFM;AAGbC,IAAAA,MAAM,EAAE,GAHK;AAIbG,IAAAA,UAAU,EAAE;AAJC,GAXJ;AAiBXC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OAAO,EAAE,MADD;AAERC,IAAAA,aAAa,EAAE;AAFP,GAjBC;AAqBXC,EAAAA,UAAU,EAAE;AACVC,IAAAA,UAAU,EAAE,CADF;AAEVC,IAAAA,UAAU,EAAE;AAFF,GArBD;AAyBXC,EAAAA,eAAe,EAAE;AACfZ,IAAAA,QAAQ,EAAE,UADK;AAEfa,IAAAA,MAAM,EAAE,IAFO;AAGfC,IAAAA,IAAI,EAAE,KAHS;AAIfC,IAAAA,SAAS,EAAE;AAJI;AAzBN,CAAf;;AAkCA,SAASC,IAAT,CAAc;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,MAAX;AAAmBC,EAAAA,QAAnB;AAA6BC,EAAAA,WAA7B;AAA0CC,EAAAA,KAA1C;AAAiDC,EAAAA;AAAjD,CAAd,EAA0E;AAAA;;AACxE,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBjC,QAAQ,CAAC;AAAEkC,IAAAA,CAAC,EAAE,CAAL;AAAQC,IAAAA,CAAC,EAAE;AAAX,GAAD,CAAhC;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BrC,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACsC,IAAD,EAAOC,OAAP,IAAkBvC,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACwC,iBAAD,EAAoBC,oBAApB,IAA4CzC,QAAQ,CAAC,IAAD,CAA1D;AACA,QAAM,CAAC0C,YAAD,EAAeC,eAAf,IAAkC3C,QAAQ,CAAC,IAAD,CAAhD;AAEA,QAAM4C,cAAc,GAAG3C,WAAW,CAAC,CAAC4C,WAAD,EAAcL,iBAAd,KAAoC;AACrEC,IAAAA,oBAAoB,CAACD,iBAAD,CAApB;AACD,GAFiC,EAE/B,EAF+B,CAAlC;AAIA,QAAMM,gBAAgB,GAAG7C,WAAW,CAAC,YAAY;AAC/C,QAAI;AACF,YAAMyC,YAAY,GAAG,MAAMvC,aAAa,CACtCwB,MADsC,EAEtCa,iBAFsC,EAGtCJ,QAHsC,CAAxC,CADE,CAMF;;AACAO,MAAAA,eAAe,CAACD,YAAD,CAAf;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYN,YAAZ;AACD,KATD,CASE,OAAOO,CAAP,EAAU;AACVF,MAAAA,OAAO,CAACG,KAAR,CAAcD,CAAd;AACD;AACF,GAbmC,EAajC,CAACT,iBAAD,EAAoBb,MAApB,EAA4BS,QAA5B,CAbiC,CAApC;AAeA,QAAMe,OAAO,GAAGlD,WAAW,CAAC,MAAM;AAChC0C,IAAAA,eAAe,CAAC,IAAD,CAAf;AACD,GAF0B,EAExB,EAFwB,CAA3B;;AAIA,WAASS,QAAT,GAAoB;AAClBtB,IAAAA,KAAK;AACLD,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAE,IAAAA,OAAO,CAAC;AAACsB,MAAAA,IAAI,EAAE,IAAP;AAAaC,MAAAA,GAAG,EAAEZ;AAAlB,KAAD,CAAP;AACD;;AAED,SAAOd,QAAQ,gBACb;AAAA,2BACI;AAAK,MAAA,KAAK,EAAE;AAAC2B,QAAAA,MAAM,EAAE;AAAT,OAAZ;AAAA,8BACA;AAAA,+BACI,QAAC,OAAD;AACA,UAAA,KAAK,EAAE5B,MADP;AAEA,UAAA,IAAI,EAAEK,IAFN;AAGA,UAAA,QAAQ,EAAEI,QAHV;AAIA,UAAA,IAAI,EAAEE,IAJN;AAKA,UAAA,MAAM,EAAE,IAAI,CALZ;AAMA,UAAA,YAAY,EAAEL,OANd;AAOA,UAAA,gBAAgB,EAAEI,WAPlB;AAQA,UAAA,cAAc,EAAEO,cARhB;AASA,UAAA,YAAY,EAAEL;AATd;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADA,eAcA;AAAK,QAAA,SAAS,EAAEb,OAAO,CAACL,eAAxB;AAAA,gCACI,QAAC,MAAD;AACA,UAAA,OAAO,EAAEyB,gBADT;AAEA,UAAA,OAAO,EAAC,WAFR;AAGA,UAAA,KAAK,EAAC,SAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAQI,QAAC,MAAD;AACA,UAAA,OAAO,EAAE,MAAM;AACXhB,YAAAA,KAAK;AACLD,YAAAA,WAAW,CAAC,KAAD,CAAX;AACH,WAJD;AAKA,UAAA,OAAO,EAAC,WALR;AAMA,UAAA,KAAK,EAAC,SANN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBARJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAdA,eAiCA,QAAC,SAAD;AACA,QAAA,GAAG,EAAEa,YADL;AAEA,QAAA,OAAO,EAAE,MAAM;AACXS,UAAAA,OAAO;AACV,SAJD;AAKA,QAAA,QAAQ,EAAEC;AALV;AAAA;AAAA;AAAA;AAAA,cAjCA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ,mBADa,GA4CX,IA5CJ;AA6CD;;GAjFQ3B,I;;KAAAA,I;AAmFT,MAAM+B,UAAU,GAAGnD,UAAU,CAACE,MAAD,CAAV,CAAmBkB,IAAnB,CAAnB;AAEA,eAAe,SAASgC,WAAT,CAAqBC,KAArB,EAA4B;AACzC,sBACE,QAAC,UAAD;AAAY,IAAA,MAAM,EAAEA,KAAK,CAAC/B,MAA1B;AAAkC,IAAA,QAAQ,EAAE+B,KAAK,CAAC9B,QAAlD;AAA4D,IAAA,WAAW,EAAE8B,KAAK,CAAC7B,WAA/E;AAA4F,IAAA,KAAK,EAAE6B,KAAK,CAAC5B,KAAzG;AAAgH,IAAA,OAAO,EAAE4B,KAAK,CAAC3B;AAA/H;AAAA;AAAA;AAAA;AAAA,UADF;AAGD;MAJuB0B,W","sourcesContent":["import { useState, useCallback } from \"react\";\r\nimport Cropper from \"react-easy-crop\";\r\nimport getCroppedImg from \"./cropImage\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport ImgDialog from \"./ImgDialog\";\r\n\r\nconst styles = {\r\n    conContainer: {\r\n      position: \"absolute\",\r\n      width: \"100vw\",\r\n      height: \"100vh\"\r\n    },\r\n    overlayContainer: {\r\n      position: \"absolute\",\r\n      width: \"100vw\",\r\n      height: \"100vh\"\r\n    },\r\n    cropContainer: {\r\n      position: \"relative\",\r\n      width: \"100%\",\r\n      height: 200,\r\n      background: \"#333\"\r\n    },\r\n    controls: {\r\n      display: \"flex\",\r\n      flexDirection: \"column\"\r\n    },\r\n    cropButton: {\r\n      flexShrink: 0,\r\n      marginLeft: 16\r\n    },\r\n    buttonContainer: {\r\n      position: \"absolute\",\r\n      bottom: \"5%\",\r\n      left: \"50%\",\r\n      transform: \"translate(-50%,0%)\"\r\n    }\r\n  };\r\n  \r\n\r\nfunction Crop({ classes, imgUrl, uploaded, setUploaded, setSt, setDone }) {\r\n  const [crop, setCrop] = useState({ x: 0, y: 0 });\r\n  const [rotation, setRotation] = useState(0);\r\n  const [zoom, setZoom] = useState(1);\r\n  const [croppedAreaPixels, setCroppedAreaPixels] = useState(null);\r\n  const [croppedImage, setCroppedImage] = useState(null);\r\n\r\n  const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\r\n    setCroppedAreaPixels(croppedAreaPixels);\r\n  }, []);\r\n\r\n  const showCroppedImage = useCallback(async () => {\r\n    try {\r\n      const croppedImage = await getCroppedImg(\r\n        imgUrl,\r\n        croppedAreaPixels,\r\n        rotation\r\n      );\r\n      // console.log(\"donee\", { croppedImage });\r\n      setCroppedImage(croppedImage);\r\n      console.log(croppedImage);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  }, [croppedAreaPixels, imgUrl, rotation]);\r\n\r\n  const onClose = useCallback(() => {\r\n    setCroppedImage(null);\r\n  }, []);\r\n\r\n  function Continue() {\r\n    setSt();\r\n    setUploaded(false);\r\n    setDone({done: true, url: croppedImage});\r\n  }\r\n\r\n  return uploaded ? (\r\n    <>\r\n        <div style={{zIndex: 5}}>\r\n        <div>\r\n            <Cropper\r\n            image={imgUrl}\r\n            crop={crop}\r\n            rotation={rotation}\r\n            zoom={zoom}\r\n            aspect={7 / 9}\r\n            onCropChange={setCrop}\r\n            onRotationChange={setRotation}\r\n            onCropComplete={onCropComplete}\r\n            onZoomChange={setZoom}\r\n            />\r\n        </div>\r\n        <div className={classes.buttonContainer}>\r\n            <Button\r\n            onClick={showCroppedImage}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            >\r\n            Show Result\r\n            </Button>\r\n            <Button\r\n            onClick={() => {\r\n                setSt();\r\n                setUploaded(false);\r\n            }}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            >\r\n            Close\r\n            </Button>\r\n        </div>\r\n        <ImgDialog\r\n        img={croppedImage}\r\n        onClose={() => {            \r\n            onClose();\r\n        }}\r\n        Continue={Continue}\r\n      />\r\n      </div>\r\n    </>\r\n  ) : null;\r\n}\r\n\r\nconst StyledCrop = withStyles(styles)(Crop);\r\n\r\nexport default function UploadedImg(props) {\r\n  return (\r\n    <StyledCrop imgUrl={props.imgUrl} uploaded={props.uploaded} setUploaded={props.setUploaded} setSt={props.setSt} setDone={props.setDone}/>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}