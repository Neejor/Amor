{"ast":null,"code":"var _jsxFileName = \"D:\\\\WebDev\\\\Amor\\\\amor\\\\src\\\\components\\\\signUpComp\\\\fileInput\\\\uploadedImg.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useCallback } from \"react\";\nimport Cropper from \"react-easy-crop\";\nimport getCroppedImg from \"./cropImage\";\nimport Button from \"@material-ui/core/Button\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport ImgDialog from \"./ImgDialog\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst styles = {\n  conContainer: {\n    position: \"absolute\",\n    width: \"100vw\",\n    height: \"100vh\"\n  },\n  overlayContainer: {\n    position: \"absolute\",\n    width: \"100vw\",\n    height: \"100vh\"\n  },\n  cropContainer: {\n    position: \"relative\",\n    width: \"100%\",\n    height: 200,\n    background: \"#333\"\n  },\n  controls: {\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  cropButton: {\n    flexShrink: 0,\n    marginLeft: 16\n  },\n  buttonContainer: {\n    position: \"absolute\",\n    bottom: \"5%\",\n    left: \"50%\",\n    transform: \"translate(-50%,0%)\"\n  }\n};\n\nfunction Crop({\n  classes,\n  imgUrl,\n  uploaded,\n  setUploaded\n}) {\n  _s();\n\n  const [crop, setCrop] = useState({\n    x: 0,\n    y: 0\n  });\n  const [rotation, setRotation] = useState(0);\n  const [zoom, setZoom] = useState(1);\n  const [croppedAreaPixels, setCroppedAreaPixels] = useState(null);\n  const [croppedImage, setCroppedImage] = useState(null);\n  const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\n    setCroppedAreaPixels(croppedAreaPixels);\n  }, []);\n  const showCroppedImage = useCallback(async () => {\n    try {\n      const croppedImage = await getCroppedImg(imgUrl, croppedAreaPixels, rotation); // console.log(\"donee\", { croppedImage });\n\n      setCroppedImage(croppedImage);\n    } catch (e) {\n      console.error(e);\n    }\n  }, [croppedAreaPixels, imgUrl, rotation]);\n  const onClose = useCallback(() => {\n    setCroppedImage(null);\n  }, []);\n  return uploaded ? /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Cropper, {\n        image: imgUrl,\n        crop: crop,\n        rotation: rotation,\n        zoom: zoom,\n        aspect: 7 / 9,\n        onCropChange: setCrop,\n        onRotationChange: setRotation,\n        onCropComplete: onCropComplete,\n        onZoomChange: setZoom\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.buttonContainer,\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: showCroppedImage,\n        variant: \"contained\",\n        color: \"primary\",\n        children: \"Show Result\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => {\n          setUploaded(false);\n        },\n        variant: \"contained\",\n        color: \"primary\",\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ImgDialog, {\n      img: croppedImage,\n      onClose: () => {\n        onClose();\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true) : null;\n}\n\n_s(Crop, \"Fr1RVbqZUmbiofVjBHburGzlXek=\");\n\n_c = Crop;\nconst StyledCrop = withStyles(styles)(Crop);\nexport default function UploadedImg({\n  imgUrl,\n  uploaded,\n  setUploaded\n}) {\n  return /*#__PURE__*/_jsxDEV(StyledCrop, {\n    imgUrl: imgUrl,\n    uploaded: uploaded,\n    setUploaded: setUploaded\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n}\n_c2 = UploadedImg;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Crop\");\n$RefreshReg$(_c2, \"UploadedImg\");","map":{"version":3,"sources":["D:/WebDev/Amor/amor/src/components/signUpComp/fileInput/uploadedImg.js"],"names":["useState","useCallback","Cropper","getCroppedImg","Button","withStyles","ImgDialog","styles","conContainer","position","width","height","overlayContainer","cropContainer","background","controls","display","flexDirection","cropButton","flexShrink","marginLeft","buttonContainer","bottom","left","transform","Crop","classes","imgUrl","uploaded","setUploaded","crop","setCrop","x","y","rotation","setRotation","zoom","setZoom","croppedAreaPixels","setCroppedAreaPixels","croppedImage","setCroppedImage","onCropComplete","croppedArea","showCroppedImage","e","console","error","onClose","StyledCrop","UploadedImg"],"mappings":"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","sourcesContent":["import { useState, useCallback } from \"react\";\r\nimport Cropper from \"react-easy-crop\";\r\nimport getCroppedImg from \"./cropImage\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport ImgDialog from \"./ImgDialog\";\r\n\r\nconst styles = {\r\n    conContainer: {\r\n      position: \"absolute\",\r\n      width: \"100vw\",\r\n      height: \"100vh\"\r\n    },\r\n    overlayContainer: {\r\n      position: \"absolute\",\r\n      width: \"100vw\",\r\n      height: \"100vh\"\r\n    },\r\n    cropContainer: {\r\n      position: \"relative\",\r\n      width: \"100%\",\r\n      height: 200,\r\n      background: \"#333\"\r\n    },\r\n    controls: {\r\n      display: \"flex\",\r\n      flexDirection: \"column\"\r\n    },\r\n    cropButton: {\r\n      flexShrink: 0,\r\n      marginLeft: 16\r\n    },\r\n    buttonContainer: {\r\n      position: \"absolute\",\r\n      bottom: \"5%\",\r\n      left: \"50%\",\r\n      transform: \"translate(-50%,0%)\"\r\n    }\r\n  };\r\n  \r\n\r\nfunction Crop({ classes, imgUrl, uploaded, setUploaded }) {\r\n  const [crop, setCrop] = useState({ x: 0, y: 0 });\r\n  const [rotation, setRotation] = useState(0);\r\n  const [zoom, setZoom] = useState(1);\r\n  const [croppedAreaPixels, setCroppedAreaPixels] = useState(null);\r\n  const [croppedImage, setCroppedImage] = useState(null);\r\n\r\n  const onCropComplete = useCallback((croppedArea, croppedAreaPixels) => {\r\n    setCroppedAreaPixels(croppedAreaPixels);\r\n  }, []);\r\n\r\n  const showCroppedImage = useCallback(async () => {\r\n    try {\r\n      const croppedImage = await getCroppedImg(\r\n        imgUrl,\r\n        croppedAreaPixels,\r\n        rotation\r\n      );\r\n      // console.log(\"donee\", { croppedImage });\r\n      setCroppedImage(croppedImage);\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  }, [croppedAreaPixels, imgUrl, rotation]);\r\n\r\n  const onClose = useCallback(() => {\r\n    setCroppedImage(null);\r\n  }, []);\r\n\r\n  return uploaded ? (\r\n    <>\r\n        <div>\r\n            <Cropper\r\n            image={imgUrl}\r\n            crop={crop}\r\n            rotation={rotation}\r\n            zoom={zoom}\r\n            aspect={7 / 9}\r\n            onCropChange={setCrop}\r\n            onRotationChange={setRotation}\r\n            onCropComplete={onCropComplete}\r\n            onZoomChange={setZoom}\r\n            />\r\n        </div>\r\n        <div className={classes.buttonContainer}>\r\n            <Button\r\n            onClick={showCroppedImage}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            >\r\n            Show Result\r\n            </Button>\r\n            <Button\r\n            onClick={() => {\r\n                setUploaded(false);\r\n            }}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            >\r\n            Close\r\n            </Button>\r\n        </div>\r\n        <ImgDialog\r\n        img={croppedImage}\r\n        onClose={() => {\r\n          onClose();\r\n        }}\r\n      />\r\n    </>\r\n  ) : null;\r\n}\r\n\r\nconst StyledCrop = withStyles(styles)(Crop);\r\n\r\nexport default function UploadedImg({ imgUrl, uploaded, setUploaded }) {\r\n  return (\r\n    <StyledCrop imgUrl={imgUrl} uploaded={uploaded} setUploaded={setUploaded} />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}